generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(100)
  role      Role     @default(STUDENT)
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestedConnections Connection[] @relation("RequestedConnections")

  receivedConnections Connection[] @relation("ReceivedConnections")

  sentMessages Message[] @relation("SentMessages")

  receivedMessages Message[] @relation("ReceivedMessages")

  Notification Notification[]

  Post Post[]

  Like Like[]

  Comment Comment[]
}

model Profile {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio        String?  @db.Text
  location   String?  @db.VarChar(100)
  interests  String?  @db.Text
  skills     Skill[]  @relation("ProfileSkills")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Skill {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(50)
  profiles  Profile[] @relation("ProfileSkills")
}

model Connection {
  id           String           @id @default(uuid())
  requesterId  String
  recipientId  String
  status       ConnectionStatus @default(PENDING)
  createdAt    DateTime         @default(now())

  requester    User             @relation("RequestedConnections", fields: [requesterId], references: [id])
  recipient    User             @relation("ReceivedConnections", fields: [recipientId], references: [id])

  @@unique([requesterId, recipientId])
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Message {
  id          String   @id @default(uuid())
  content     String   @db.Text
  timestamp   DateTime @default(now())

  senderId    String
  receiverId  String

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  type      String?  
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Post {
  id        String   @id @default(uuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  imageUrl  String?  @db.VarChar(512)
  type      String?  // "JOB", "UPDATE", etc.
  createdAt DateTime @default(now())

  Like Like[]

  Comment Comment[]
}

model Like {
  id      String   @id @default(uuid())
  userId  String
  postId  String
  user    User     @relation(fields: [userId], references: [id])
  post    Post     @relation(fields: [postId], references: [id])
  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}
enum Role {
  STUDENT
  ALUM
  ADMIN
}
