generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                    String                        @id @default(uuid())
  email                                 String                        @unique @db.VarChar(255)
  password                              String                        @db.VarChar(255)
  name                                  String?
  role                                  Role                          @default(STUDENT)
  description         String?
  iconUrl             String?
  bannerUrl           String?
  createdAt           DateTime              @default(now())
  joinRequests                          JoinRequest[]
  ownedSubCommunities                   SubCommunity[]                @relation("OwnedSubCommunities")
  adminSubCommunityCreationRequests     SubCommunityCreationRequest[] @relation("AdminSubCommunityCreationRequests")
  requesterSubCommunityCreationRequests SubCommunityCreationRequest[] @relation("RequesterSubCommunityCreationRequests")
  subCommunityMemberships               SubCommunityMember[]
  badges                                UsersOnBadges[]
  Comment                               Comment[]
  receivedConnections                   Connection[]                  @relation("ReceivedConnections")
  requestedConnections                  Connection[]                  @relation("RequestedConnections")
  endorsements                          Endorsement[]
  feedbackGiven                         Feedback[]                    @relation("FeedbackGiven")
  feedbackReceived                      Feedback[]                    @relation("FeedbackReceived")
  files                                 File[]                        @relation("UserFiles")
  Vote                                  Vote[]
  mentorSettings                        MentorSettings?
  mentorshipsAsMentee                   Mentorship[]                  @relation("Mentee")
  mentorshipsAsMentor                   Mentorship[]                  @relation("Mentor")
  mentorshipApplications                MentorshipApplication[]       @relation("MentorshipApplications")
  mentorshipListings                    MentorshipListing[]           @relation("MentorshipListings")
  mentorshipRequestsAsMentee            MentorshipRequest[]           @relation("MentorshipRequestMentee")
  mentorshipRequestsAsMentor            MentorshipRequest[]           @relation("MentorshipRequestMentor")
  receivedMessages                      Message[]                     @relation("ReceivedMessages")
  sentMessages                          Message[]                     @relation("SentMessages")
  Notification                          Notification[]
  Post                                  Post[]
  profile                               Profile?
  collaborationRequests                 ProjectCollaborationRequest[]
  projectComments                       ProjectComment[]
  followedProjects                      ProjectFollower[]
  supportedProjects                     ProjectSupport[]
  teamMemberships                       ProjectTeamMember[]
  projects                              Project[]
  referralApplications                  ReferralApplication[]
  postedReferrals                       Referral[]                    @relation("PostedReferrals")
  userPoints                            UserPoints?
  reportsMade                           ContentReport[]               @relation("ReportsMade")
  reportsHandled                        ContentReport[]               @relation("ReportsHandled")
  events                                Event[]

  @@map("users")
}

model Project {
  id                    String                        @id @default(uuid())
  ownerId               String
  title                 String
  description           String
  githubUrl             String?
  websiteUrl            String?
  imageUrl              String?
  videoUrl              String?
  tags                  String[]
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  collaborationRequests ProjectCollaborationRequest[]
  comments              ProjectComment[]
  followers             ProjectFollower[]
  supporters            ProjectSupport[]
  teamMembers           ProjectTeamMember[]
  owner                 User                          @relation(fields: [ownerId], references: [id])

  @@map("projects")
}

model ProjectTeamMember {
  id        String      @id @default(uuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  createdAt DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model ProjectComment {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  comment   String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("project_comments")
}

model ProjectSupport {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_supports")
}

model ProjectFollower {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_followers")
}

model ProjectCollaborationRequest {
  id        String              @id @default(uuid())
  projectId String
  userId    String
  message   String?
  status    CollaborationStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  project   Project             @relation(fields: [projectId], references: [id])
  user      User                @relation(fields: [userId], references: [id])

  @@map("project_collaboration_requests")
}

model Feedback {
  id          String      @id @default(uuid())
  rating      Int
  comment     String?
  createdAt   DateTime    @default(now())
  authorId    String
  feedbackFor FeedbackFor
  receiverId  String
  author      User        @relation("FeedbackGiven", fields: [authorId], references: [id])
  receiver    User        @relation("FeedbackReceived", fields: [receiverId], references: [id])

  @@map("feedback")
}

model Profile {
  id           String        @id @default(uuid())
  userId       String        @unique
  bio          String?
  location     String?       @db.VarChar(100)
  interests    String?
  avatarUrl    String?       @db.VarChar(512)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  endorsements Endorsement[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills       Skill[]       @relation("ProfileSkills")

  @@map("profile")
}

model Skill {
  id           String        @id @default(uuid())
  name         String        @unique @db.VarChar(50)
  endorsements Endorsement[]
  profiles     Profile[]     @relation("ProfileSkills")

  @@map("skill")
}

model Endorsement {
  id         String   @id @default(uuid())
  profileId  String
  skillId    String
  endorserId String
  createdAt  DateTime @default(now())
  endorser   User     @relation(fields: [endorserId], references: [id])
  profile    Profile  @relation(fields: [profileId], references: [id])
  skill      Skill    @relation(fields: [skillId], references: [id])

  @@unique([profileId, skillId, endorserId])
  @@map("endorsement")
}

model Badge {
  id    String          @id @default(uuid())
  name  String          @unique @db.VarChar(50)
  icon  String
  users UsersOnBadges[]

  @@map("badge")
}

model UsersOnBadges {
  userId     String
  badgeId    String
  assignedAt DateTime @default(now())
  badge      Badge    @relation(fields: [badgeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, badgeId])
}

model Connection {
  id          String           @id @default(uuid())
  requesterId String
  recipientId String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  recipient   User             @relation("ReceivedConnections", fields: [recipientId], references: [id])
  requester   User             @relation("RequestedConnections", fields: [requesterId], references: [id])

  @@unique([requesterId, recipientId])
  @@map("connection")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  timestamp  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])

  @@map("message")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Post {
  id             String          @id @default(uuid())
  authorId       String
  content        String
  flairId        String?
  flair          Flair?          @relation(fields: [flairId], references: [id])
  imageUrl       String?         @db.VarChar(512)
  type           String?
  createdAt      DateTime        @default(now())
  status         PostStatus      @default(PENDING)
  subCommunityId String?
  updatedAt      DateTime        @default(now()) @updatedAt
  Comment        Comment[]
  Vote           Vote[]
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  subCommunity   SubCommunity?   @relation(fields: [subCommunityId], references: [id])
  reports        ContentReport[]

  @@map("post")
}

model Vote {
  id          String        @id @default(uuid())
  userId      String
  postId      String?
  commentId   String?
  type        VoteType
  targetType  VoteTargetType
  post        Post?         @relation(fields: [postId], references: [id])
  comment     Comment?      @relation(fields: [commentId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@unique([userId, postId, commentId])
  @@map("votes")
}

model Comment {
  id        String          @id @default(uuid())
  content   String
  userId    String
  postId    String
  parentId  String?
  createdAt DateTime        @default(now())
  post      Post            @relation(fields: [postId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
  parent    Comment?        @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]       @relation("CommentReplies")
  votes     Vote[]
  reports   ContentReport[]

  @@map("comment")
}

model Referral {
  id           String                @id @default(uuid())
  company      String
  jobTitle     String
  description  String
  requirements String
  location     String
  status       ReferralStatus        @default(PENDING)
  alumniId     String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  applications ReferralApplication[]
  postedBy     User                  @relation("PostedReferrals", fields: [alumniId], references: [id])

  @@map("referrals")
}

model ReferralApplication {
  id          String            @id @default(uuid())
  referralId  String
  studentId   String
  resumeUrl   String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  referral    Referral          @relation(fields: [referralId], references: [id])
  student     User              @relation(fields: [studentId], references: [id])

  @@map("referral_applications")
}

model File {
  id           String   @id @default(uuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  uploadedBy   String
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Mentorship {
  id        String               @id @default(uuid())
  mentorId  String
  menteeId  String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  progress  Float                @default(0)
  goals     Goal[]
  meetings  Meeting[]
  mentee    User                 @relation("Mentee", fields: [menteeId], references: [id])
  mentor    User                 @relation("Mentor", fields: [mentorId], references: [id])
  agreement MentorshipAgreement?

  @@unique([mentorId, menteeId])
  @@map("mentorship")
}

model Goal {
  id           String     @id @default(uuid())
  mentorshipId String
  title        String
  description  String
  status       GoalStatus @default(IN_PROGRESS)
  dueDate      DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  mentorship   Mentorship @relation(fields: [mentorshipId], references: [id])

  @@map("goals")
}

model MentorSettings {
  id          String   @id @default(uuid())
  userId      String   @unique
  isAvailable Boolean  @default(true)
  skills      String[]
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mentor_settings")
}

model MentorshipRequest {
  id        String                  @id @default(uuid())
  mentorId  String
  menteeId  String
  message   String?
  status    MentorshipRequestStatus @default(PENDING)
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  mentee    User                    @relation("MentorshipRequestMentee", fields: [menteeId], references: [id])
  mentor    User                    @relation("MentorshipRequestMentor", fields: [mentorId], references: [id])

  @@unique([mentorId, menteeId])
  @@map("mentorship_request")
}

model SubCommunity {
  id                            String                       @id @default(cuid())
  createdAt                     DateTime                     @default(now())
  updatedAt                     DateTime                     @updatedAt
  name                          String                       @unique
  description                   String
  iconUrl                       String?
  bannerUrl                     String?
  isPrivate                     Boolean                      @default(false)
  status                        SubCommunityStatus           @default(ACTIVE)
  ownerId                       String
  subCommunityCreationRequestId String?                      @unique
  joinRequests                  JoinRequest[]
  owner                         User                         @relation("OwnedSubCommunities", fields: [ownerId], references: [id])
  creationRequest               SubCommunityCreationRequest? @relation(fields: [subCommunityCreationRequestId], references: [id])
  members                       SubCommunityMember[]
  posts                         Post[]
  reports                       ContentReport[]
  flairs                        Flair[]
}

model SubCommunityMember {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  subCommunityId String
  role           SubCommunityRole @default(MEMBER)
  subCommunity   SubCommunity     @relation(fields: [subCommunityId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@unique([userId, subCommunityId])
}

model JoinRequest {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userId         String
  subCommunityId String
  status         JoinRequestStatus @default(PENDING)
  subCommunity   SubCommunity      @relation(fields: [subCommunityId], references: [id])
  user           User              @relation(fields: [userId], references: [id])

  @@unique([userId, subCommunityId])
}

model SubCommunityCreationRequest {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String
  description   String
  rules         String
  documentUrls  String[]
  status        RequestStatus @default(PENDING)
  requesterId   String
  adminId       String?
  subCommunity  SubCommunity?
  admin         User?         @relation("AdminSubCommunityCreationRequests", fields: [adminId], references: [id])
  requester     User          @relation("RequesterSubCommunityCreationRequests", fields: [requesterId], references: [id])
}

model UserPoints {
  id           String             @id @default(cuid())
  userId       String             @unique
  points       Int                @default(0)
  updatedAt    DateTime           @updatedAt
  transactions PointTransaction[]
  user         User               @relation(fields: [userId], references: [id])

  @@map("user_points")
}

model PointTransaction {
  id           String     @id @default(cuid())
  userId       String
  userPointsId String
  points       Int
  type         String
  entityId     String?
  createdAt    DateTime   @default(now())
  userPoints   UserPoints @relation(fields: [userPointsId], references: [id])

  @@map("point_transactions")
}

model MentorshipListing {
  id                    String                  @id @default(uuid())
  mentorId              String
  title                 String
  description           String
  skills                String[]
  goals                 String[]
  communicationChannels String[]
  availability          String
  status                MentorshipListingStatus @default(OPEN)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  applications          MentorshipApplication[]
  mentor                User                    @relation("MentorshipListings", fields: [mentorId], references: [id])

  @@map("mentorship_listings")
}

model MentorshipApplication {
  id        String                      @id @default(uuid())
  menteeId  String
  listingId String
  message   String
  status    MentorshipApplicationStatus @default(PENDING)
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
  listing   MentorshipListing           @relation(fields: [listingId], references: [id])
  mentee    User                        @relation("MentorshipApplications", fields: [menteeId], references: [id])

  @@unique([menteeId, listingId])
  @@map("mentorship_applications")
}

model Meeting {
  id           String        @id @default(uuid())
  mentorshipId String
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  status       MeetingStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  mentorship   Mentorship    @relation(fields: [mentorshipId], references: [id])

  @@map("meetings")
}

model MentorshipAgreement {
  id           String          @id @default(uuid())
  mentorshipId String          @unique
  content      String
  status       AgreementStatus @default(PENDING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  mentorship   Mentorship      @relation(fields: [mentorshipId], references: [id])

  @@map("mentorship_agreements")
}

model ContentReport {
  id             String              @id @default(cuid())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  reporterId     String
  reporter       User                @relation("ReportsMade", fields: [reporterId], references: [id])
  subCommunityId String
  subCommunity   SubCommunity        @relation(fields: [subCommunityId], references: [id])
  type           ReportedContentType
  reason         String
  postId         String?
  post           Post?               @relation(fields: [postId], references: [id])
  commentId      String?
  comment        Comment?            @relation(fields: [commentId], references: [id])
  status         ReportStatus        @default(PENDING)
  handlerId      String?
  handler        User?               @relation("ReportsHandled", fields: [handlerId], references: [id])

  @@index([subCommunityId, status])
}

model Event {
  id               String      @id @default(uuid())
  title            String
  description      String
  imageUrl         String?
  registrationLink String?
  date             DateTime
  status           EventStatus @default(UPCOMING)
  authorId         String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  author           User        @relation(fields: [authorId], references: [id])
  category         EventCategory @default(GENERAL)
  tags             String[]
  location         String?

  @@map("events")
}

enum ProjectRole {
  OWNER
  MEMBER
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FeedbackFor {
  MENTOR
  MENTEE
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum Role {
  STUDENT
  ALUM
  ADMIN
  MENTOR
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
}

enum MentorshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubCommunityStatus {
  ACTIVE
  BANNED
}

enum SubCommunityRole {
  OWNER
  MODERATOR
  MEMBER
}

enum JoinRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MentorshipListingStatus {
  OPEN
  CLOSED
}

enum MentorshipApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MeetingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum AgreementStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReportedContentType {
  POST
  COMMENT
}

enum ReportStatus {
  PENDING
  ADDRESSED
  DISMISSED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum VoteTargetType {
  POST
  COMMENT
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

enum EventCategory {
  GENERAL
  TECH_TALK
  WORKSHOP
  NETWORKING
  COMMUNITY
}

model Flair {
  id            String       @id @default(uuid())
  name          String
  subCommunityId String
  subCommunity  SubCommunity @relation(fields: [subCommunityId], references: [id])
  posts         Post[]

  @@unique([name, subCommunityId])
}