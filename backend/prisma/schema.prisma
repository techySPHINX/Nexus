generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique @db.VarChar(255)
  password             String                @db.VarChar(255)
  name                 String                @db.VarChar(100)
  role                 Role                  @default(STUDENT)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  Comment              Comment[]
  receivedConnections  Connection[]          @relation("ReceivedConnections")
  requestedConnections Connection[]          @relation("RequestedConnections")
  Like                 Like[]
  receivedMessages     Message[]             @relation("ReceivedMessages")
  sentMessages         Message[]             @relation("SentMessages")
  Notification         Notification[]
  Post                 Post[]
  profile              Profile?
  postedReferrals      Referral[]            @relation("PostedReferrals")
  referralApplications ReferralApplication[]
  files                File[]                @relation("UserFiles")

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  location  String?  @db.VarChar(100)
  interests String?
  avatarUrl String?  @db.VarChar(512)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills    Skill[]  @relation("ProfileSkills")

  @@map("profile")
}

model Skill {
  id       String    @id @default(uuid())
  name     String    @unique @db.VarChar(50)
  profiles Profile[] @relation("ProfileSkills")

  @@map("skill")
}

model Connection {
  id          String           @id @default(uuid())
  requesterId String
  recipientId String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  recipient   User             @relation("ReceivedConnections", fields: [recipientId], references: [id])
  requester   User             @relation("RequestedConnections", fields: [requesterId], references: [id])

  @@unique([requesterId, recipientId])
  @@map("connection")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  timestamp  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])

  @@map("message")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Post {
  id        String    @id @default(uuid())
  authorId  String
  content   String
  imageUrl  String?   @db.VarChar(512)
  type      String?
  createdAt DateTime  @default(now())
  Comment   Comment[]
  Like      Like[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("post")
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@map("like")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comment")
}

model Referral {
  id           String                @id @default(uuid())
  company      String
  jobTitle     String
  description  String
  requirements String
  location     String
  status       ReferralStatus        @default(PENDING)
  postedBy     User                  @relation("PostedReferrals", fields: [alumniId], references: [id])
  alumniId     String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  applications ReferralApplication[]

  @@map("referrals")
}

model ReferralApplication {
  id          String            @id @default(uuid())
  referral    Referral          @relation(fields: [referralId], references: [id])
  referralId  String
  student     User              @relation(fields: [studentId], references: [id])
  studentId   String
  resumeUrl   String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("referral_applications")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  path      String
  uploadedBy String
  userId    String
  user      User     @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum Role {
  STUDENT
  ALUM
  ADMIN
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}
