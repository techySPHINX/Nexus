generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                 @id @default(uuid())
  email                       String                 @unique @db.VarChar(255)
  password                    String                 @db.VarChar(255)
  name                        String                 @db.VarChar(100)
  role                        Role                   @default(STUDENT)
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  Comment                     Comment[]
  receivedConnections         Connection[]           @relation("ReceivedConnections")
  requestedConnections        Connection[]           @relation("RequestedConnections")
  Like                        Like[]
  receivedMessages            Message[]              @relation("ReceivedMessages")
  sentMessages                Message[]              @relation("SentMessages")
  Notification                Notification[]
  Post                        Post[]
  profile                     Profile?
  postedReferrals             Referral[]             @relation("PostedReferrals")
  referralApplications        ReferralApplication[]
  files                       File[]                 @relation("UserFiles")
  endorsements                Endorsement[]
  badges                      UsersOnBadges[]
  mentorshipsAsMentor         Mentorship[]           @relation("Mentor")
  mentorshipsAsMentee         Mentorship[]           @relation("Mentee")
  mentorSettings              MentorSettings?
  mentorshipRequestsAsMentor  MentorshipRequest[]    @relation("MentorshipRequestMentor")
  mentorshipRequestsAsMentee  MentorshipRequest[]    @relation("MentorshipRequestMentee")
  feedbackGiven               Feedback[]             @relation("FeedbackGiven")
  feedbackReceived            Feedback[]             @relation("FeedbackReceived")
  projects                    Project[]
  supportedProjects           ProjectSupport[]
  followedProjects            ProjectFollower[]
  collaborationRequests       ProjectCollaborationRequest[]
  projectComments             ProjectComment[]
  teamMemberships             ProjectTeamMember[]

  @@map("users")
}

model Project {
  id                      String                        @id @default(uuid())
  ownerId                 String
  owner                   User                          @relation(fields: [ownerId], references: [id])
  title                   String
  description             String
  githubUrl               String?
  websiteUrl              String?
  imageUrl                String?
  videoUrl                String?
  tags                    String[]
  supporters              ProjectSupport[]
  followers               ProjectFollower[]
  collaborationRequests   ProjectCollaborationRequest[]
  comments                ProjectComment[]
  teamMembers             ProjectTeamMember[]
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt

  @@map("projects")
}

model ProjectTeamMember {
  id          String      @id @default(uuid())
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  role        ProjectRole @default(MEMBER)
  createdAt   DateTime    @default(now())

  @@unique([projectId, userId])
  @@map("project_team_members")
}

enum ProjectRole {
  OWNER
  MEMBER
}

model ProjectComment {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  comment     String
  createdAt   DateTime @default(now())

  @@map("project_comments")
}

model ProjectSupport {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([projectId, userId])
  @@map("project_supports")
}

model ProjectFollower {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([projectId, userId])
  @@map("project_followers")
}

model ProjectCollaborationRequest {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  message     String?
  status      CollaborationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("project_collaboration_requests")
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Feedback {
  id          String   @id @default(uuid())
  rating      Int
  comment     String?
  mentorId    String
  menteeId    String
  mentor      User     @relation("FeedbackReceived", fields: [mentorId], references: [id])
  mentee      User     @relation("FeedbackGiven", fields: [menteeId], references: [id])
  createdAt   DateTime @default(now())

  @@map("feedback")
}

model Profile {
  id          String        @id @default(uuid())
  userId      String        @unique
  bio         String?
  location    String?       @db.VarChar(100)
  interests   String?
  avatarUrl   String?       @db.VarChar(512)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills      Skill[]       @relation("ProfileSkills")
  endorsements Endorsement[]

  @@map("profile")
}

model Skill {
  id           String        @id @default(uuid())
  name         String        @unique @db.VarChar(50)
  profiles     Profile[]     @relation("ProfileSkills")
  endorsements Endorsement[]

  @@map("skill")
}

model Endorsement {
  id          String   @id @default(uuid())
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  skill       Skill    @relation(fields: [skillId], references: [id])
  skillId     String
  endorser    User     @relation(fields: [endorserId], references: [id])
  endorserId  String
  createdAt   DateTime @default(now())

  @@unique([profileId, skillId, endorserId])
  @@map("endorsement")
}

model Badge {
  id      String   @id @default(uuid())
  name    String   @unique @db.VarChar(50)
  icon    String
  users   UsersOnBadges[]
  
  @@map("badge")
}

model UsersOnBadges {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  badge      Badge    @relation(fields: [badgeId], references: [id])
  badgeId    String
  assignedAt DateTime @default(now())

  @@id([userId, badgeId])
}

model Connection {
  id          String           @id @default(uuid())
  requesterId String
  recipientId String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  recipient   User             @relation("ReceivedConnections", fields: [recipientId], references: [id])
  requester   User             @relation("RequestedConnections", fields: [requesterId], references: [id])

  @@unique([requesterId, recipientId])
  @@map("connection")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  timestamp  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])

  @@map("message")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Post {
  id        String    @id @default(uuid())
  authorId  String
  content   String
  imageUrl  String?   @db.VarChar(512)
  type      String?
  status    PostStatus @default(PENDING)
  createdAt DateTime  @default(now())
  Comment   Comment[]
  Like      Like[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("post")
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@map("like")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comment")
}

model Referral {
  id           String                @id @default(uuid())
  company      String
  jobTitle     String
  description  String
  requirements String
  location     String
  status       ReferralStatus        @default(PENDING)
  postedBy     User                  @relation("PostedReferrals", fields: [alumniId], references: [id])
  alumniId     String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  applications ReferralApplication[]

  @@map("referrals")
}

model ReferralApplication {
  id          String            @id @default(uuid())
  referral    Referral          @relation(fields: [referralId], references: [id])
  referralId  String
  student     User              @relation(fields: [studentId], references: [id])
  studentId   String
  resumeUrl   String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("referral_applications")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  path      String
  uploadedBy String
  userId    String
  user      User     @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum Role {
  STUDENT
  ALUM
  ADMIN
  MENTOR
}

model Mentorship {
  id        String   @id @default(uuid())
  mentorId  String
  menteeId  String
  mentor    User     @relation("Mentor", fields: [mentorId], references: [id])
  mentee    User     @relation("Mentee", fields: [menteeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mentorId, menteeId])
  @@map("mentorship")
}

model MentorSettings {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAvailable Boolean  @default(true)
  skills      String[]
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("mentor_settings")
}

model MentorshipRequest {
  id          String                   @id @default(uuid())
  mentorId    String
  menteeId    String
  mentor      User                     @relation("MentorshipRequestMentor", fields: [mentorId], references: [id])
  mentee      User                     @relation("MentorshipRequestMentee", fields: [menteeId], references: [id])
  message     String?
  status      MentorshipRequestStatus @default(PENDING)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  @@unique([mentorId, menteeId])
  @@map("mentorship_request")
}

enum MentorshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}
